//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceReference
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Customer", Namespace="http://schemas.datacontract.org/2004/07/WcfService.Interfaces")]
    public partial class Customer : object
    {
        
        private string AddressField;
        
        private int CustomerIDField;
        
        private string CustomerNameField;
        
        private string EmailIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address
        {
            get
            {
                return this.AddressField;
            }
            set
            {
                this.AddressField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID
        {
            get
            {
                return this.CustomerIDField;
            }
            set
            {
                this.CustomerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomerName
        {
            get
            {
                return this.CustomerNameField;
            }
            set
            {
                this.CustomerNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailId
        {
            get
            {
                return this.EmailIdField;
            }
            set
            {
                this.EmailIdField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ISalesService")]
    public interface ISalesService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISalesService/InsertCustomer", ReplyAction="http://tempuri.org/ISalesService/InsertCustomerResponse")]
        System.Threading.Tasks.Task<bool> InsertCustomerAsync(ServiceReference.Customer obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISalesService/GetAllCustomer", ReplyAction="http://tempuri.org/ISalesService/GetAllCustomerResponse")]
        System.Threading.Tasks.Task<ServiceReference.Customer[]> GetAllCustomerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISalesService/DeleteCustomer", ReplyAction="http://tempuri.org/ISalesService/DeleteCustomerResponse")]
        System.Threading.Tasks.Task<bool> DeleteCustomerAsync(int Cid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISalesService/UpdateCustomer", ReplyAction="http://tempuri.org/ISalesService/UpdateCustomerResponse")]
        System.Threading.Tasks.Task<bool> UpdateCustomerAsync(ServiceReference.Customer obj);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public interface ISalesServiceChannel : ServiceReference.ISalesService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.0")]
    public partial class SalesServiceClient : System.ServiceModel.ClientBase<ServiceReference.ISalesService>, ServiceReference.ISalesService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SalesServiceClient() : 
                base(SalesServiceClient.GetDefaultBinding(), SalesServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISalesService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SalesServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(SalesServiceClient.GetBindingForEndpoint(endpointConfiguration), SalesServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SalesServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SalesServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SalesServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SalesServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SalesServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<bool> InsertCustomerAsync(ServiceReference.Customer obj)
        {
            return base.Channel.InsertCustomerAsync(obj);
        }
        
        public System.Threading.Tasks.Task<ServiceReference.Customer[]> GetAllCustomerAsync()
        {
            return base.Channel.GetAllCustomerAsync();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCustomerAsync(int Cid)
        {
            return base.Channel.DeleteCustomerAsync(Cid);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCustomerAsync(ServiceReference.Customer obj)
        {
            return base.Channel.UpdateCustomerAsync(obj);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISalesService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISalesService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:64369/SalesService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SalesServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISalesService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SalesServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISalesService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISalesService,
        }
    }
}
